{"version":3,"file":"static/js/141.92828a35.chunk.js","mappings":"kQAEaA,EAAQC,EAAAA,GAAAA,MAAH,kFAMLC,EAAeD,EAAAA,GAAAA,OAAH,iQ,SCJZE,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAiBA,OACE,kBAAMC,SAZe,SAAAC,GAGrB,GAFAA,EAAIC,kBAECJ,EACH,OAAOK,IAAAA,OAAAA,KAAqB,4BAG9BP,EAASE,GACTG,EAAIG,OAAOC,OACZ,EAGC,WACE,SAACb,EAAD,CAAOc,KAAK,OAAOC,YAAY,6BAA6BX,SAjB3C,SAAAK,GACnBF,EAASE,EAAIG,OAAOI,MACrB,KAgBG,SAACd,EAAD,CAAcY,KAAK,SAAnB,sBAGL,E,2BCgBD,EApCe,WAAO,IAAD,EACnB,GAAwCG,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4Bd,EAAAA,EAAAA,UAAS,IAArC,eAAOe,EAAP,KAAeC,EAAf,KACMC,EAAW,UAAGJ,EAAaK,IAAI,iBAApB,QAAiC,GAC5CC,GAAWC,EAAAA,EAAAA,MAoBjB,OAdAC,EAAAA,EAAAA,YAAU,WACHJ,IAGLK,EAAAA,EAAAA,IAAkBL,GACfM,MAAK,SAAAC,GACJ,GAAqC,IAAjCA,EAASC,KAAKC,QAAQC,OACxB,OAAOrB,IAAAA,OAAAA,QAAwB,+CAEjCU,EAAUQ,EAASC,KAAKC,QACzB,IACAE,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMG,QAAtB,GACf,GAAE,CAACf,KAGF,4BACE,SAACnB,EAAD,CAAWC,SApBK,SAAAkC,GAClBnB,EAA8B,KAAdmB,EAAmB,CAAEC,OAAQD,GAAc,CAAC,EAC7D,IAmBIlB,EAAOY,OAAS,GACf,SAACQ,EAAA,EAAD,CAAYpB,OAAQA,EAAQqB,MAAO,CAAEC,KAAMlB,MAE3C,gBAAKmB,IAAKC,EAAcC,IAAKD,EAAcE,MAAM,WAIxD,C","sources":["components/SearchBox/SearchBox.styled.js","components/SearchBox/SearchBox.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Input = styled.input`\n  width: 250px;\n  height: 30px;\n  margin-bottom: 30px;\n`;\n\nexport const SearchButton = styled.button`\n  width: 100px;\n  height: 36px;\n  font-weight: 500;\n  cursor: pointer;\n  border: 1px solid darkgrey;\n  border-radius: 3px;\n  color: orangered;\n\n  :hover,\n  :focus {\n    color: white;\n    background-color: orangered;\n  }\n`;\n","import Notiflix from 'notiflix';\nimport { useState } from 'react';\nimport { Input, SearchButton } from './SearchBox.styled';\n\nexport const SearchBox = ({ onChange }) => {\n  const [query, setQuery] = useState('');\n\n  const handleChange = evt => {\n    setQuery(evt.target.value);\n  };\n\n  const onHandleSubmit = evt => {\n    evt.preventDefault();\n\n    if (!query) {\n      return Notiflix.Notify.info('Please enter a film name');\n    }\n\n    onChange(query);\n    evt.target.reset();\n  };\n\n  return (\n    <form onSubmit={onHandleSubmit}>\n      <Input type=\"text\" placeholder=\"enter movie name to search\" onChange={handleChange} />\n      <SearchButton type=\"submit\">search</SearchButton>\n    </form>\n  );\n};\n","import Notiflix from 'notiflix';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { SearchBox } from 'components/SearchBox/SearchBox';\nimport { serchMoviesByName } from 'service/api';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport movieLibrary from '../../service/default3.jpeg';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const searchValue = searchParams.get('filter') ?? '';\n  const location = useLocation();\n\n  const searchMovie = movieName => {\n    setSearchParams(movieName !== '' ? { filter: movieName } : {});\n  };\n\n  useEffect(() => {\n    if (!searchValue) {\n      return;\n    }\n    serchMoviesByName(searchValue)\n      .then(responce => {\n        if (responce.data.results.length === 0) {\n          return Notiflix.Notify.warning('Sorry, we have found any films... Try again');\n        }\n        setMovies(responce.data.results);\n      })\n      .catch(error => console.log(error.message));\n  }, [searchValue]);\n\n  return (\n    <div>\n      <SearchBox onChange={searchMovie} />\n      {movies.length > 0 ? (\n        <MoviesList movies={movies} state={{ from: location }} />\n      ) : (\n        <img src={movieLibrary} alt={movieLibrary} width=\"100%\" />\n      )}\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["Input","styled","SearchButton","SearchBox","onChange","useState","query","setQuery","onSubmit","evt","preventDefault","Notiflix","target","reset","type","placeholder","value","useSearchParams","searchParams","setSearchParams","movies","setMovies","searchValue","get","location","useLocation","useEffect","serchMoviesByName","then","responce","data","results","length","catch","error","console","log","message","movieName","filter","MoviesList","state","from","src","movieLibrary","alt","width"],"sourceRoot":""}